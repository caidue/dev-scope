name: Release and Manual Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    tags:
      - 'v*'

env:
  MAVEN_OPTS: -Xmx1024m
  NODE_VERSION: '20.19.0'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn install

    - name: Build frontend
      run: |
        cd frontend
        yarn build:web

    - name: Run backend unit tests
      run: mvn clean test

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/target/surefire-reports/
          backend/target/failsafe-reports/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn install

    - name: Build frontend
      run: |
        cd frontend
        yarn build:web

    - name: Build application and Docker image
      run: |
        mvn clean package -DskipTests
        docker tag dev-scope:latest dev-scope:${{ github.ref_name || github.sha }}

    - name: Save Docker image
      run: |
        docker save dev-scope:latest | gzip > dev-scope.tar.gz

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: dev-scope.tar.gz
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run OWASP Dependency Check with Maven
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -Dformat=JSON \
          -Dformat=HTML \
          -DfailBuildOnCVSS=7 \
          -DenableRetired=true \
          -DenableExperimental=true \
          -DnvdApiKey="" \
          -DnvdApiDelay=2000 \
          -DnvdApiValidForHours=24 \
          -DnvdApiMaxRetryCount=3
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          target/dependency-check-report.json
          target/dependency-check-report.html

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Release ${{ github.ref_name }}
          
          ### What's included:
          - Built Quarkus Angular application
          - Docker image: `dev-scope:${{ github.ref_name }}`
          - Frontend assets embedded in backend
          
          ### Quick Start:
          ```bash
          # Pull the image
          docker pull dev-scope:${{ github.ref_name }}
          
          # Run the application
          docker run -p 8080:8080 dev-scope:${{ github.ref_name }}
          ```
          
          ### Changes:
          See the [changelog](CHANGELOG.md) for detailed changes.
          
          ---
          *This release was automatically created by GitHub Actions*
